// mockgen -destination ./mock/mock_user_login_detail_repository.go -source user_login_detail_repository.go
// Code generated by MockGen. DO NOT EDIT.
// Source: user_login_detail_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "www.ivtlinfoview.com/infotax/infotax-backend/app/domain/entity"
)

// MockUserLoginDetailRepository is a mock of UserLoginDetailRepository interface.
type MockUserLoginDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginDetailRepositoryMockRecorder
}

// MockUserLoginDetailRepositoryMockRecorder is the mock recorder for MockUserLoginDetailRepository.
type MockUserLoginDetailRepositoryMockRecorder struct {
	mock *MockUserLoginDetailRepository
}

// NewMockUserLoginDetailRepository creates a new mock instance.
func NewMockUserLoginDetailRepository(ctrl *gomock.Controller) *MockUserLoginDetailRepository {
	mock := &MockUserLoginDetailRepository{ctrl: ctrl}
	mock.recorder = &MockUserLoginDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLoginDetailRepository) EXPECT() *MockUserLoginDetailRepositoryMockRecorder {
	return m.recorder
}

// CheckIfUserLoginDetailExists mocks base method.
func (m *MockUserLoginDetailRepository) CheckIfUserLoginDetailExists(ctx context.Context, empID entity.EmployeeID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserLoginDetailExists", ctx, empID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserLoginDetailExists indicates an expected call of CheckIfUserLoginDetailExists.
func (mr *MockUserLoginDetailRepositoryMockRecorder) CheckIfUserLoginDetailExists(ctx, empID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserLoginDetailExists", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).CheckIfUserLoginDetailExists), ctx, empID)
}

// CreateBulkUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) CreateBulkUserLoginDetail(ctx context.Context, dtls []entity.UserLoginDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkUserLoginDetail", ctx, dtls)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulkUserLoginDetail indicates an expected call of CreateBulkUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) CreateBulkUserLoginDetail(ctx, dtls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).CreateBulkUserLoginDetail), ctx, dtls)
}

// CreateUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) CreateUserLoginDetail(ctx context.Context, dtl entity.UserLoginDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLoginDetail", ctx, dtl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserLoginDetail indicates an expected call of CreateUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) CreateUserLoginDetail(ctx, dtl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).CreateUserLoginDetail), ctx, dtl)
}

// DeleteUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) DeleteUserLoginDetail(ctx context.Context, id entity.EmployeeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserLoginDetail", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserLoginDetail indicates an expected call of DeleteUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) DeleteUserLoginDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).DeleteUserLoginDetail), ctx, id)
}

// GetAllUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) GetAllUserLoginDetail(ctx context.Context) ([]entity.UserLoginDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserLoginDetail", ctx)
	ret0, _ := ret[0].([]entity.UserLoginDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserLoginDetail indicates an expected call of GetAllUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) GetAllUserLoginDetail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).GetAllUserLoginDetail), ctx)
}

// GetUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) GetUserLoginDetail(ctx context.Context, id entity.EmployeeID) (entity.UserLoginDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginDetail", ctx, id)
	ret0, _ := ret[0].(entity.UserLoginDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginDetail indicates an expected call of GetUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) GetUserLoginDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).GetUserLoginDetail), ctx, id)
}

// GetUserLoginRole mocks base method.
func (m *MockUserLoginDetailRepository) GetUserLoginRole(ctx context.Context, id entity.EmployeeID) (entity.EmployeeRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginRole", ctx, id)
	ret0, _ := ret[0].(entity.EmployeeRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginRole indicates an expected call of GetUserLoginRole.
func (mr *MockUserLoginDetailRepositoryMockRecorder) GetUserLoginRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginRole", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).GetUserLoginRole), ctx, id)
}

// SearchUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) SearchUserLoginDetail(ctx context.Context, filterMap entity.FilterMap) ([]entity.UserLoginDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserLoginDetail", ctx, filterMap)
	ret0, _ := ret[0].([]entity.UserLoginDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserLoginDetail indicates an expected call of SearchUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) SearchUserLoginDetail(ctx, filterMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).SearchUserLoginDetail), ctx, filterMap)
}

// UpdateUserLoginDetail mocks base method.
func (m *MockUserLoginDetailRepository) UpdateUserLoginDetail(ctx context.Context, id entity.EmployeeID, dtl entity.UserLoginDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLoginDetail", ctx, id, dtl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLoginDetail indicates an expected call of UpdateUserLoginDetail.
func (mr *MockUserLoginDetailRepositoryMockRecorder) UpdateUserLoginDetail(ctx, id, dtl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLoginDetail", reflect.TypeOf((*MockUserLoginDetailRepository)(nil).UpdateUserLoginDetail), ctx, id, dtl)
}
