// mockgen -destination ./mock/mock_user_login_detail.go -source interfaces.go
// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_user_login_detail is a generated GoMock package.
package mock_user_login_detail

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	error "www.ivtlinfoview.com/infotax/infotax-backend/app/error"
	in "www.ivtlinfoview.com/infotax/infotax-backend/app/usecase/user_login_detail/in"
	out "www.ivtlinfoview.com/infotax/infotax-backend/app/usecase/user_login_detail/out"
)

// MockUseCaser is a mock of UseCaser interface.
type MockUseCaser struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaserMockRecorder
}

// MockUseCaserMockRecorder is the mock recorder for MockUseCaser.
type MockUseCaserMockRecorder struct {
	mock *MockUseCaser
}

// NewMockUseCaser creates a new mock instance.
func NewMockUseCaser(ctrl *gomock.Controller) *MockUseCaser {
	mock := &MockUseCaser{ctrl: ctrl}
	mock.recorder = &MockUseCaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaser) EXPECT() *MockUseCaserMockRecorder {
	return m.recorder
}

// CreateUserLoginDetail mocks base method.
func (m *MockUseCaser) CreateUserLoginDetail(ctx context.Context, detail in.CreateUserDetail) (out.SaveResponse, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLoginDetail", ctx, detail)
	ret0, _ := ret[0].(out.SaveResponse)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// CreateUserLoginDetail indicates an expected call of CreateUserLoginDetail.
func (mr *MockUseCaserMockRecorder) CreateUserLoginDetail(ctx, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).CreateUserLoginDetail), ctx, detail)
}

// DeleteUserLoginDetail mocks base method.
func (m *MockUseCaser) DeleteUserLoginDetail(ctx context.Context, empID string) (out.DeleteResponse, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserLoginDetail", ctx, empID)
	ret0, _ := ret[0].(out.DeleteResponse)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// DeleteUserLoginDetail indicates an expected call of DeleteUserLoginDetail.
func (mr *MockUseCaserMockRecorder) DeleteUserLoginDetail(ctx, empID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).DeleteUserLoginDetail), ctx, empID)
}

// DownloadUserLoginDetailTemplate mocks base method.
func (m *MockUseCaser) DownloadUserLoginDetailTemplate(ctx context.Context, filePath string) (string, string, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadUserLoginDetailTemplate", ctx, filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*error.Error)
	return ret0, ret1, ret2
}

// DownloadUserLoginDetailTemplate indicates an expected call of DownloadUserLoginDetailTemplate.
func (mr *MockUseCaserMockRecorder) DownloadUserLoginDetailTemplate(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadUserLoginDetailTemplate", reflect.TypeOf((*MockUseCaser)(nil).DownloadUserLoginDetailTemplate), ctx, filePath)
}

// DownloadUsersLoginDetail mocks base method.
func (m *MockUseCaser) DownloadUsersLoginDetail(ctx context.Context, filePath string) (string, string, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadUsersLoginDetail", ctx, filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*error.Error)
	return ret0, ret1, ret2
}

// DownloadUsersLoginDetail indicates an expected call of DownloadUsersLoginDetail.
func (mr *MockUseCaserMockRecorder) DownloadUsersLoginDetail(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadUsersLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).DownloadUsersLoginDetail), ctx, filePath)
}

// GetAllUserLoginDetail mocks base method.
func (m *MockUseCaser) GetAllUserLoginDetail(ctx context.Context) ([]out.UserLoginDetail, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserLoginDetail", ctx)
	ret0, _ := ret[0].([]out.UserLoginDetail)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// GetAllUserLoginDetail indicates an expected call of GetAllUserLoginDetail.
func (mr *MockUseCaserMockRecorder) GetAllUserLoginDetail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).GetAllUserLoginDetail), ctx)
}

// GetUserLoginDetail mocks base method.
func (m *MockUseCaser) GetUserLoginDetail(ctx context.Context, empID string) (out.UserLoginDetail, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginDetail", ctx, empID)
	ret0, _ := ret[0].(out.UserLoginDetail)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// GetUserLoginDetail indicates an expected call of GetUserLoginDetail.
func (mr *MockUseCaserMockRecorder) GetUserLoginDetail(ctx, empID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).GetUserLoginDetail), ctx, empID)
}

// GetUserLoginRole mocks base method.
func (m *MockUseCaser) GetUserLoginRole(ctx context.Context, empID string) (out.UserLoginRole, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginRole", ctx, empID)
	ret0, _ := ret[0].(out.UserLoginRole)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// GetUserLoginRole indicates an expected call of GetUserLoginRole.
func (mr *MockUseCaserMockRecorder) GetUserLoginRole(ctx, empID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginRole", reflect.TypeOf((*MockUseCaser)(nil).GetUserLoginRole), ctx, empID)
}

// SearchUserLoginDetail mocks base method.
func (m *MockUseCaser) SearchUserLoginDetail(ctx context.Context, filterMap map[string]interface{}) ([]out.UserLoginDetail, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserLoginDetail", ctx, filterMap)
	ret0, _ := ret[0].([]out.UserLoginDetail)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// SearchUserLoginDetail indicates an expected call of SearchUserLoginDetail.
func (mr *MockUseCaserMockRecorder) SearchUserLoginDetail(ctx, filterMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).SearchUserLoginDetail), ctx, filterMap)
}

// UpdateUserLoginDetail mocks base method.
func (m *MockUseCaser) UpdateUserLoginDetail(ctx context.Context, empID string, detail in.UpdateUserDetail) (out.UpdateResponse, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLoginDetail", ctx, empID, detail)
	ret0, _ := ret[0].(out.UpdateResponse)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// UpdateUserLoginDetail indicates an expected call of UpdateUserLoginDetail.
func (mr *MockUseCaserMockRecorder) UpdateUserLoginDetail(ctx, empID, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).UpdateUserLoginDetail), ctx, empID, detail)
}

// UploadUsersLoginDetail mocks base method.
func (m *MockUseCaser) UploadUsersLoginDetail(ctx context.Context, file multipart.File) (out.SaveResponse, *error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUsersLoginDetail", ctx, file)
	ret0, _ := ret[0].(out.SaveResponse)
	ret1, _ := ret[1].(*error.Error)
	return ret0, ret1
}

// UploadUsersLoginDetail indicates an expected call of UploadUsersLoginDetail.
func (mr *MockUseCaserMockRecorder) UploadUsersLoginDetail(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUsersLoginDetail", reflect.TypeOf((*MockUseCaser)(nil).UploadUsersLoginDetail), ctx, file)
}
