// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package registry

import (
	"context"
	"www.ivtlinfoview.com/infotax/infotax-backend/app/config"
	"www.ivtlinfoview.com/infotax/infotax-backend/app/external/persistence/mysql"
	"www.ivtlinfoview.com/infotax/infotax-backend/app/usecase/employee_official_detail"
	"www.ivtlinfoview.com/infotax/infotax-backend/app/usecase/employee_payroll_detail"
	"www.ivtlinfoview.com/infotax/infotax-backend/app/usecase/user_login_detail"
)

// Injectors from wire.go:

func InjectedUserLoginDetailUseCase(ctx context.Context) user_login_detail.UseCaser {
	configConfig := config.ParseConfig()
	db := config.NewDB(configConfig)
	userLoginDetailRepository := mysql.NewUserLoginDetailRepository(db)
	useCaser := user_login_detail.NewUseCase(userLoginDetailRepository)
	return useCaser
}

func InjectedEmployeeOfficialDetailUseCase(ctx context.Context) employee_official_detail.UseCaser {
	configConfig := config.ParseConfig()
	db := config.NewDB(configConfig)
	employeeOfficialDetailRepository := mysql.NewEmployeeOfficialDetailRepository(db)
	useCaser := employee_official_detail.NewUseCase(employeeOfficialDetailRepository)
	return useCaser
}

func InjectedEmployeePayrollDetailUseCase(ctx context.Context) employee_payroll_detail.UseCaser {
	configConfig := config.ParseConfig()
	db := config.NewDB(configConfig)
	employeePayrollDetailRepository := mysql.NewEmployeePayrollDetailRepository(db)
	useCaser := employee_payroll_detail.NewUseCase(employeePayrollDetailRepository)
	return useCaser
}
